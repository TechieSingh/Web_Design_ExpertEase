import { CommentActionsBarProps } from "../CommentActionsBar";
import { CommentEditProps } from "../CommentEdit";
import { CommentHeaderProps } from "../CommentHeader";
import { CommentMenuProps } from "../CommentMenu";
import { CommentRemoveProps } from "../CommentRemove";
import { ApiPaths } from "../CommentSectionContainer/interface";
import { CommentReplyBoxProps } from "../CommentReplyBox";
import { Comment, User, BorderStyles, Article } from "../interfaces";
interface CommentContainerProps {
    replyIndent?: number;
    headerBodySpacing?: number;
    threadsSeperatorWidth?: number;
    threadsSeperatorColor?: string;
    threadsSeperatorStyle?: BorderStyles;
    threadsSeperatorTopPadding?: number;
    marginBottom?: number;
    paddingX?: number;
    paddingY?: number;
    commentFontSize?: number;
    commentFontColor?: string;
    loadMoreText?: string;
    loadMoreColor?: string;
    repliesSideBorderWidth?: number;
    repliesSideBorderStyle?: BorderStyles;
    repliesSideBorderColor?: string;
    loginToLikeMessage?: string;
}
export interface CommentElementsProps {
    containerProps?: CommentContainerProps;
    headerProps?: Omit<CommentHeaderProps, "comment" | "commentAuthorClickCallback">;
    menuProps?: Omit<CommentMenuProps, "showRemove" | "hideRemove" | "showEdit" | "hideEdit">;
    actionBarProps?: Omit<CommentActionsBarProps, "comment" | "setComment" | "areRepliesVisible" | "toggleReplies" | "showReplyBox" | "currentUser" | "apiBaseUrl" | "apiPaths">;
    replyBoxProps?: Omit<CommentReplyBoxProps, "appKey" | "articleId" | "currentUser" | "parentComment" | "hideReply" | "addReply" | "apiBaseUrl" | "apiPaths">;
    editProps?: Omit<CommentEditProps, "comment" | "setComment" | "hideEdit" | "apiBaseUrl" | "apiPaths">;
    removeProps?: Omit<CommentRemoveProps, "appKey" | "comment" | "removeComment" | "isRemoveShowing" | "setIsRemoveShowing" | "apiBaseUrl" | "apiPaths">;
}
export interface CommentProps {
    appKey?: string;
    articleId: string;
    onRemove: (comment: Comment) => void;
    index: number;
    currentUser?: User;
    apiBaseUrl: string;
    apiPaths?: ApiPaths;
    comment: Comment;
    sortBy: "popular" | "newest" | "oldest";
    replyChunkSize?: number;
    depth: number;
    commentAuthorClickCallback?: (author: User) => void;
    setArticle: React.Dispatch<React.SetStateAction<Article | undefined>>;
    elementProps: CommentElementsProps;
}
export {};
